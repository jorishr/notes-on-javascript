######################
ELOQUENT JS:CHAPTER V 
HIGHER ORDER FUNCTIONS
######################

It is a useful skill, in programming, to notice when you are working at too low a level of abstraction. Every single step and loop that the computer has to perform is obviously important but equally important is to be able to write meaningful code that is easy to understand and debug if necessary. 

This requires thinking at a more abstract level that easily explains the solution for the problem: sum(range(1, 10)) is easy to understand what it does and why. The details of the loops and tracking bindings are ommited here but when you have hundreds of lines of code this one is easy to identify and debug.

HIGHER ORDER FUNCTIONS are functions that operate on other functions: 
- either by taking other functions as arguments 
- or by returning other functions

A simple example is setInterval(function, interval) it will execute a function at a set interval in ms.

setInterval(function(){
  document.write("this is an anonymous function")
 }, 2000);

One area where higher-order functions shine is data processing. See file: higher order methods for arrays.


EXAMPLES

A.	REPETITION ABSTRACTION

Functions can be passed as arguments because they are regular values.

Repeat "doing something" with a for loop:

function repeatLog(n){
	for(let i = 0; i <=n; i++){
		console.log(i);
	}
}

repeatLog(10); 	//-> 0, 1, ...,10

Instead of console.log we can abstract that log function to an "action" which can be a function:

function repeat(n, action){
	for(i = 0; i <= n; i++){
		action(i);
	}
}
repeat(10, console.log)	//-> 0, 1, ...,10

Thus, the function repeat take two arguments, n the number of repetition, and the action to be performed n times.

You can also call the repeat function whereby the action is not predefined but a function we create on the spot.

repeat(10, (parameters) => {body});
repeat(10, function name(parameters){body});

let label = [];

repeat(10, i => {label.push(`Unit ${i + 1}`)});

console.log(label) // -> [Unit 1, Unit 2, ..., Unit 11]



B.	GREATER THAN

This function returns another function that compares two values and returns a bolean result.

function greaterThan(n){
	return m => m > n;
}

Store an environment in a variable.

const greaterThan10 = greaterThan(10);

greaterThan10(5)		//-> (5) => return 5 > 10 -> false	


B.	FOR EACH

forEach is an array method that provides a higher order function that performs a for loop:

["a", "b", "c"].forEach((val) => console.log(val));
// -> a, b, c 

The forEach loops over the array and for each element it performs the (anonymous) function we provided as an argument.