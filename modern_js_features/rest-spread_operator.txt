####################
REST/SPREAD OPERATOR
#######################
I.	SPREAD ON ARRAYS
II.	SPREAD ON OBJECTS
#######################


######################
I.	SPREAD ON ARRAYS
######################

The rest operator collects the remaining arguments of a function and returns them into an [array].

function printArguments(a, b, ...c){
	console.log(a)
	console.log(b)
	console.log(c)
}

... operates on argument defined as c. Thus when we call the function and pass into it more than two parameters, the remaining ones will be collected into and array.

printArguments(1, 2, 3, 4, 5)
// -> 1, 2, [3, 4, 5]

USE CASE 1:

When you have to access the arguments and manipulate them, you cannot use methods such as map or filter because the keyword arguments is not an array, it is an array-like object. 

There are three possible solutions: 
1. the long version with a for loop
2. convert the arguments into an array and then apply methods to that array
3. use rest operator to collect the arguments into an array and use methods and arrow functions to write a concise solution.

EXAMPLE: 
Write a function sumArguments that returns the sum of all the arguments that are passed through the function. The not number of arguments is not specified.

1. Loop over the arguments, use the keyword arguments, which has length property. Each argument[i] is evaluated and its value is added to the total making the sum.

function sumArguments(){
	let total = 0;
	for(let i = 0; i < arguments.length; i++){
		total += arguments[i];
	}
	return total;
}
sumArguments(1, 2, 3, 4, 5) // -> 15

2. Create an array that stores the arguments first. Then use reduce to compute the sum.

function sumArguments(){
	let arrArg = [].slice.call(arguments);
	return arrArg.reduce(function(value, next){
			return value + next; 	
		});
}
sumArguments(1, 2, 3, 4, 5) // -> 15

3. Clean code with rest operator and arrow functions.

let sumArguments = 
	(...arg) => arg.reduce((value, next) => value + next);

sumArguments(1, 2, 3, 4, 5) // -> 15

NOTE: Important is that you use ... only when you declare the function. For reference later on you use the character you assigned to it, preferebly "arg".


USE CASE 2: SPREAD
When used outside the function parameter declaration ... is called the spread operator. It spreads out an array as comma seperated values into another array.

var arr1 = [1, 2, 3];
var arr2 = [4, 5, 6];
var arr3 = [7, 8, 9];

var combine = [...arr1, ...arr2, ...arr3];
// -> [1, 2, 3, 4, 5, 6, 7, 8. 9]

Before you would have to use the .concat method:
var combine = arr1.concat(arr2).concat(arr3);

USE CASE 2: Spread an array into a function that only accepts individual arguments.

var num = [1, 2, 3]
function addNumbers(a, b, c){
	return a + b + c; 
}
addNumbers(num) // -> "1, 2, 3undefinedundefined" because we are missing two parameter b and c.

addNumbers(...num) // -> 6, if you call the same function but use the spread operator, all the values are passed through individually and a sum is returned.

USE CASE 2: SPREAD instead of APPLY
var arr = [5, 3, 7, 4, 3, 1, 2]
Math.max(arr) // -> NaN, because this method can only deal with numbers not arrays.

There are two possible solutions:
1. Math.max(...arr) // -> 7, this spreads out all the values of the array as individual numbers into the max method.

2. complex solution using apply method which accepts the keyword this and an array of arguments.
Math.max.apply(this, arr) // -> 7

Also in the above function addNumbers we apply this solution:
addNumbers.apply(this, num) // -> 6

MERGE ARRAYS

const x = [1,2]
const y = [3,4]
const xY = [..y, ...x]
console.log(xY) = [3,4,1,2]

OR let Xy = x.concat(...y)


############################
II.	REST/SPREAD ON OBJECTS
############################

If you want to create a new object from existing properties and values in an object you can use DESTRUCTURING:

var instructor = {first: "colt", last: "r", classRoom: "1", course: "2"}

var ´{...data} = instructor;
data;
// -> {first: "colt", last: "r", classRoom: "1", course: "2"}

The rest operator collects all remaining key-value pairs an puts them into a new object. Can be used to COPY an object. 

OBJECT SPREAD
var instructor = {first: "colt", last: "r", classRoom: "1", 
var instructor2 = {...instructor};

This will spread out the key-value pairs of the first object into the second. This can be used to COPY as well. Plus, you can spread out the first object AND OVERWRITE certain property values with new values.

var instructor2 = {...instructor, first: "Joris"};
instructor2;
// -> {first: "Joris", last: "r", classRoom: "1"}

This is similar to Object.assign. 

USE CASE: create a default object and modify only certain properties when needed

var default = {a: 1, b: 2, c: 3};
var first = {...default, a: "1st"}
var second = {...default, b: "2nd"}