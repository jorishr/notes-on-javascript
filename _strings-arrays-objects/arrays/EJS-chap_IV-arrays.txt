###############################
EJS CHAPTER IV: DATA STRUCTURES
###############################
ARRAYS
A. 	PROPERTIES
B.	METHODS
C.	NESTED ARRAYS
###############################

Primitive or simple data types like numbers, boleans or strings are the atomic elements that more complex data structures are built from. Objects, for example, are groups of primitive values.


############
I.	ARRAYS
############

Variables let you store just one piece of info, a number, a name, etc. But this does not work if you want to store multiple piece of info together.

For any LIST OF RELATED DATA we use arrays. An example would be a Facebook post that is stored with a list of all related comments.

In dutch an array would be een reeks of rij of gerelateerde data, gescheiden door een komma.

var colors = []; //nu hebben we een nieuwe array, leeg
var colors = new Array(); //another way to make a new array.

Arrays can hold old a mixture of any type of data:
 
var random = ["hello", 20, true, null, undefined];

Arrays are OBJECTS with registers or index based keys. A regular object would be called literal as the keys literally indicate what type of data is stored ({username: 'John Doe', age: 22}). 
The array can be seen as {0: 'value1', 1: true, 2: 33, 3:'value4'}

The advantage is that it is easily iterable. We don't take about key-value pairs but elements at a certain index position in the array. 


######################
A.	ARRAY PROPERTIES
######################

Arrays have a .length property, just as variables which refers to the number of pieces of info inside and each piece is also indexed with zero-based counting

var colors = ["green", "yellow", "red"];
colors.length 	//-> 3

The long version would be: array["length"]

var colors = ["green", "yellow", "red"];
        index:   0        1         2

The values in an array are stored as the array's properties, using (zero-based) position numbers as property names. Since you cannot use the . notation with numbers you always use the [].

Almost all values in JS have properties that can be accessed by . or []. 

Only null and undefined don't have properties.

Thus arr.length or string[1]. With . the word after the . is the literal name of the property, arr.length or Math.max. 

By using the [x], the expression inside the brackets is evaluated. Thus string.x fetches the property named "x" but string[x] evaluates the expression x and uses its result as a the property name. 

arr[2] looks up the value inside the array at index position 2.

Property NAMES are strings and the . notation only works with valid binding names, thus property John Doe would have to be written between brackets: string["John Doe"];

NEGATIVE INDEX

Negative index values can be added to an array BUT they are considered to be ARBITRARY properties of the array object!

Example:
let arr = [1,2,3]; arr[-1] = -1;
//->	arr = [1,2,3, -1: -1]

They don't affect the length property: arr.length = 3

It's the same as arr.new = 5;	//-> arr = [1,2,3, new: 5];


#############
B.	METHODS 
#############

ARRAY METHODS are properties that hold function values. For example, .toUpperCase or .toLowerCase. They can be used to manipulate arrays or strings.

.push and .pop add or remove values add the end of an array. 

Refer to stack data set: added last is removed first.

	let colors = ["green", "yellow"];
	colors.push("red");
	console.log(colors); // "green", "yellow", "red"
	colors.pop(); //pops "red"


###################
C.	NESTED ARRAYS
###################

An array can consist of multiple nested arrays, it is important to understand how the indexing works:

var groupFriends [
  ["An", "Ria", "Emily"], 		//index position 0
  ["Jack", "Donovan", "Mike"], 	//index position 1
  ["Erik", "Rollo", "Richard"], 	//index position 2
]    0      1         2 		//inside each array

To call on an item in an array:

console.log(groupFriends[1][2]); //-> Mike

First you call the index position of the array you want, then the usual call on the index position inside that array.

This is very important when working with data structures in order to call thecorrect items form, for example, the Facebook API, or MogoDB.
