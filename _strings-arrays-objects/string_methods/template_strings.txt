################
TEMPLATE STRINGS
################

To avoid tedious concatenation you can use string interpellation: a string with `backtick quotes` and ${variable computation} to evaluate the binding(s).

console.log(`Hello ${firstName} ${lastName}`)

STRING WITH MULTIPLE LINES
Before: "line 1 \n line2 \n line3" 

`
Hello
World
`

let one = 1, two = 2;
let sum = `The sum of ${one} and ${two} is ${one + two}.`;
//	-> The sum of 1 and 2 is 3.

Note that variable datatypes other than strings are converted into a string automatically.

TAGGED FUNCTIONS

Functions can be called with a template string directly and thereby the regular string characters can be split off from the variable computation values.

tagged`The sum of ${one} and ${two} is ${one + two}.`;
//	-> [The, sum, of, and, is], [1,2,3];

const tagged = function(strArr, ...vals){
	console.log(strArr);
	console.log(vals);	
}

The function accepts two arguments but is invoke with just one template string. Because it is a template string it can be broken down into two arrays.

If you call the function the normal way you get a different result because the template string does not get broken down in to pieces.

tagged(`The sum of ${one} and ${two} is ${one + two}.`);
//	-> The sum of 1 and 2 is 3., []


let str = String`Hello World`	//-> Hello World
