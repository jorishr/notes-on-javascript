#########
JS BASICS
#############################################
ELOQUENT JS, CHAPTER I: ATOMIC ELEMENTS OF JS
I. PRIMITIVE DATATYPES
#############################################

######################
I. PRIMITIVE DATATYPES
######################

Every program language can differentiate between categories of data or value types. Javascript has 4: 
numbers, 
strings, 
booleans, 
empty values(null and undefined). 

ES6 has added the +Symbol.

More complex datatype are: functions and objects. 


##################
A. 	EMPTY VALUES
##################

Both null and undefined are values that note the ABSENSE OF A MEANINGFUL VALUE, they carry no information. Some operations have to yield some kind of value and in absence of something meaningfull they will produce undefined. 

The meaning of null is: explicitely nothing. 

	NOTE: typeof null	// -> object 

Also a variable can be declared without a value, thus set to undefined or null, before a meaningful value is assigned to it later on.

	var newVar;
	newVar			// -> undefined

	typeof undefined 	// -> undefined

REMEMBER: 
The data type of NaN is number

The data type of an array is object

The data type of a date is object

The data type of null is object

The data type of an undefined variable is undefined

The data type of a variable that has not been assigned a value is also undefined


console.log(typeof typeof 1);
//	-> string
typeof(typeof 1)	-> typeof 1 = Number -> typeof(Number) = String


#############
B.	NUMBERS
#############

Values of the numbers type: numeric values. If you type the number 11, what happens is that the bit pattern for the number 11 comes into existence inside the computers memory: 

0	0	0	1	0	1	1
64   	32	16	8	4	2	1

The weight of each digit increases by factor 2 untill 64 bits. Thus the max number that can be created is 2tothe64th. 

There are whole numbers (integers), negative numbers and decimal numbers (fractional or floating): 2, 2.5, -10, 2.998e8. The point, the - sign and the e=10x represent one bit. 

In practice the maximum number you can write without losing precision is about 16 digits long. The exact maximum number in JS is stored in Number.MAX_SAFE_INTEGER.

Thus console.log(555555555555555555)	//-> 555555555555555600
As number above the max safe integer get rounded off and get zeros after that.

NOTE: calculations with fractional numbers are not always precise, they should be treated as approximations, see pi.

- arithmetic with operators: +-*/ between number values produces new number values. Use parenthesis for determining the order in which the operators have to be applied:

	(100 + 3) * 10 //1030

If not precedence kicks in (* or / before + and -). Operators with the same precedence level: from left to right:

	1 + 3 - 2 //4 - 2 = 2 

NOTE: Modulo % is the remainder of the division 10%3 = 1 if modulo % 2 = 0 we talk about even numbers. Modulo != 0 odd. 

- special values: Infinity, NaN
	NaN is a value that represents the outcome of a numeric 	operation without a meaningful result: 
	0 / 0 OR Infinity + -Infinity 

- floating numbers problem: 
console.log(0.1 + 0.2)	//-> 0.30000000000000004
JS can only accurately represent numbers up to 18 digits. After that numbers get rounded off. 


###################
C.	STRING VALUES
###################

Strings are used to represent text or a group of characters. Everything between quotes will be turned into a string value by JS. 

They are modeled into a series of bits using the UNICODE standard. This standard assigns a number to each character and thus a string is basically a sequence of numbers.

Strings can contain special characters and numbers.

- concatenation: using the + operator to tie diferent strings together: "hello " + "world" becomes "hello world"

- methods: string values have a number of associated functions, methods, that can be applied to them:

	"hello world".length 
	//counts the number of characters inside the string

	"hello world"[0] 
	//returns position 0: h

- escape characters
	\ 	escape next character
	\n 	newline
	\t	tab

"This is the first line.\nAnd this is the second line."
//->	This is the first line.
	And this is the second line.

"A newline character is written like \"\\n\"."
//->	A newline character is written like "\n". 

NOTE: template literals `backtick quotes` can span muliple lines and can embed other values that are the result of a COMPUTATION inside the string. 

	'half of 100 is ${100 / 2}' 

When you write something inside ${} in a template literal, its result will be computed, converted to a string, and included at that position. The example produces “half of 100 is 50”.